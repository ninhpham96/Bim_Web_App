// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

import { ISubElementBuffer } from '../compress-revit/isub-element-buffer.js';


export class IElementBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IElementBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIElementBuffer(bb:flatbuffers.ByteBuffer, obj?:IElementBuffer):IElementBuffer {
  return (obj || new IElementBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIElementBuffer(bb:flatbuffers.ByteBuffer, obj?:IElementBuffer):IElementBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IElementBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

userData():string|null
userData(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userData(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

subChildren(index: number, obj?:ISubElementBuffer):ISubElementBuffer|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new ISubElementBuffer()).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
}

subChildrenLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

static startIElementBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addUserData(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, userDataOffset, 0);
}

static addSubChildren(builder:flatbuffers.Builder, subChildrenOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, subChildrenOffset, 0);
}

static createSubChildrenVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]!);
  }
  return builder.endVector();
}

static startSubChildrenVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIElementBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIElementBuffer(builder:flatbuffers.Builder, userDataOffset:flatbuffers.Offset, subChildrenOffset:flatbuffers.Offset):flatbuffers.Offset {
  IElementBuffer.startIElementBuffer(builder);
  IElementBuffer.addUserData(builder, userDataOffset);
  IElementBuffer.addSubChildren(builder, subChildrenOffset);
  return IElementBuffer.endIElementBuffer(builder);
}
}
