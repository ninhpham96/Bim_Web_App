// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IMetadataBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IMetadataBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIMetadataBuffer(bb:flatbuffers.ByteBuffer, obj?:IMetadataBuffer):IMetadataBuffer {
  return (obj || new IMetadataBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIMetadataBuffer(bb:flatbuffers.ByteBuffer, obj?:IMetadataBuffer):IMetadataBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IMetadataBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

type():string|null
type(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
type(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

version():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

generator():string|null
generator(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
generator(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

projectName():string|null
projectName(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
projectName(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startIMetadataBuffer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addType(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, typeOffset, 0);
}

static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldFloat32(1, version, 0.0);
}

static addGenerator(builder:flatbuffers.Builder, generatorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, generatorOffset, 0);
}

static addProjectName(builder:flatbuffers.Builder, projectNameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, projectNameOffset, 0);
}

static endIMetadataBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIMetadataBuffer(builder:flatbuffers.Builder, typeOffset:flatbuffers.Offset, version:number, generatorOffset:flatbuffers.Offset, projectNameOffset:flatbuffers.Offset):flatbuffers.Offset {
  IMetadataBuffer.startIMetadataBuffer(builder);
  IMetadataBuffer.addType(builder, typeOffset);
  IMetadataBuffer.addVersion(builder, version);
  IMetadataBuffer.addGenerator(builder, generatorOffset);
  IMetadataBuffer.addProjectName(builder, projectNameOffset);
  return IMetadataBuffer.endIMetadataBuffer(builder);
}
}
