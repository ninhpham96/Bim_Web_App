// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class ISubElementBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):ISubElementBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsISubElementBuffer(bb:flatbuffers.ByteBuffer, obj?:ISubElementBuffer):ISubElementBuffer {
  return (obj || new ISubElementBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsISubElementBuffer(bb:flatbuffers.ByteBuffer, obj?:ISubElementBuffer):ISubElementBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new ISubElementBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

geometry():string|null
geometry(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
geometry(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

material():string|null
material(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
material(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

static startISubElementBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addGeometry(builder:flatbuffers.Builder, geometryOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, geometryOffset, 0);
}

static addMaterial(builder:flatbuffers.Builder, materialOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, materialOffset, 0);
}

static endISubElementBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createISubElementBuffer(builder:flatbuffers.Builder, geometryOffset:flatbuffers.Offset, materialOffset:flatbuffers.Offset):flatbuffers.Offset {
  ISubElementBuffer.startISubElementBuffer(builder);
  ISubElementBuffer.addGeometry(builder, geometryOffset);
  ISubElementBuffer.addMaterial(builder, materialOffset);
  return ISubElementBuffer.endISubElementBuffer(builder);
}
}
