// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IMaterialBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IMaterialBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIMaterialBuffer(bb:flatbuffers.ByteBuffer, obj?:IMaterialBuffer):IMaterialBuffer {
  return (obj || new IMaterialBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIMaterialBuffer(bb:flatbuffers.ByteBuffer, obj?:IMaterialBuffer):IMaterialBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IMaterialBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

uuui():string|null
uuui(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
uuui(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

color():string|null
color(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
color(optionalEncoding?:any):string|Uint8Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
}

transparentcy():boolean {
  const offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
}

opacity():number {
  const offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readFloat32(this.bb_pos + offset) : 0.0;
}

static startIMaterialBuffer(builder:flatbuffers.Builder) {
  builder.startObject(4);
}

static addUuui(builder:flatbuffers.Builder, uuuiOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, uuuiOffset, 0);
}

static addColor(builder:flatbuffers.Builder, colorOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, colorOffset, 0);
}

static addTransparentcy(builder:flatbuffers.Builder, transparentcy:boolean) {
  builder.addFieldInt8(2, +transparentcy, +false);
}

static addOpacity(builder:flatbuffers.Builder, opacity:number) {
  builder.addFieldFloat32(3, opacity, 0.0);
}

static endIMaterialBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIMaterialBuffer(builder:flatbuffers.Builder, uuuiOffset:flatbuffers.Offset, colorOffset:flatbuffers.Offset, transparentcy:boolean, opacity:number):flatbuffers.Offset {
  IMaterialBuffer.startIMaterialBuffer(builder);
  IMaterialBuffer.addUuui(builder, uuuiOffset);
  IMaterialBuffer.addColor(builder, colorOffset);
  IMaterialBuffer.addTransparentcy(builder, transparentcy);
  IMaterialBuffer.addOpacity(builder, opacity);
  return IMaterialBuffer.endIMaterialBuffer(builder);
}
}
