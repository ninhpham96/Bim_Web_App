// automatically generated by the FlatBuffers compiler, do not modify

/* eslint-disable @typescript-eslint/no-unused-vars, @typescript-eslint/no-explicit-any, @typescript-eslint/no-non-null-assertion */

import * as flatbuffers from 'flatbuffers';

export class IUVBuffer {
  bb: flatbuffers.ByteBuffer|null = null;
  bb_pos = 0;
  __init(i:number, bb:flatbuffers.ByteBuffer):IUVBuffer {
  this.bb_pos = i;
  this.bb = bb;
  return this;
}

static getRootAsIUVBuffer(bb:flatbuffers.ByteBuffer, obj?:IUVBuffer):IUVBuffer {
  return (obj || new IUVBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

static getSizePrefixedRootAsIUVBuffer(bb:flatbuffers.ByteBuffer, obj?:IUVBuffer):IUVBuffer {
  bb.setPosition(bb.position() + flatbuffers.SIZE_PREFIX_LENGTH);
  return (obj || new IUVBuffer()).__init(bb.readInt32(bb.position()) + bb.position(), bb);
}

itemSize():number {
  const offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt8(this.bb_pos + offset) : 0;
}

array(index: number):number|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readFloat32(this.bb!.__vector(this.bb_pos + offset) + index * 4) : 0;
}

arrayLength():number {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
}

arrayArray():Float32Array|null {
  const offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? new Float32Array(this.bb!.bytes().buffer, this.bb!.bytes().byteOffset + this.bb!.__vector(this.bb_pos + offset), this.bb!.__vector_len(this.bb_pos + offset)) : null;
}

static startIUVBuffer(builder:flatbuffers.Builder) {
  builder.startObject(2);
}

static addItemSize(builder:flatbuffers.Builder, itemSize:number) {
  builder.addFieldInt8(0, itemSize, 0);
}

static addArray(builder:flatbuffers.Builder, arrayOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, arrayOffset, 0);
}

static createArrayVector(builder:flatbuffers.Builder, data:number[]|Float32Array):flatbuffers.Offset;
/**
 * @deprecated This Uint8Array overload will be removed in the future.
 */
static createArrayVector(builder:flatbuffers.Builder, data:number[]|Uint8Array):flatbuffers.Offset;
static createArrayVector(builder:flatbuffers.Builder, data:number[]|Float32Array|Uint8Array):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (let i = data.length - 1; i >= 0; i--) {
    builder.addFloat32(data[i]!);
  }
  return builder.endVector();
}

static startArrayVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
}

static endIUVBuffer(builder:flatbuffers.Builder):flatbuffers.Offset {
  const offset = builder.endObject();
  return offset;
}

static createIUVBuffer(builder:flatbuffers.Builder, itemSize:number, arrayOffset:flatbuffers.Offset):flatbuffers.Offset {
  IUVBuffer.startIUVBuffer(builder);
  IUVBuffer.addItemSize(builder, itemSize);
  IUVBuffer.addArray(builder, arrayOffset);
  return IUVBuffer.endIUVBuffer(builder);
}
}
